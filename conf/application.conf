# Copyright 2017 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

appName = epaye-api
appUrl = "http://epaye-api.protected.mdtp"

# Play Modules
# ~~~~
# Additional play modules can be added here
play.modules.enabled += "com.kenshoo.play.metrics.PlayModule"
play.modules.enabled += "uk.gov.hmrc.play.config.inject.ConfigModule"
play.modules.enabled += "uk.gov.hmrc.epayeapi.modules.AppModule"

# Global request handler
# ~~~~
# Set to the object handler for migrated 2.3 services
play.http.requestHandler = "play.api.http.GlobalSettingsHttpRequestHandler"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret = "SL22jO9rKl0YDbhkLGuxcm1dmIUPLx3N5ej9NkWv7i9OxORH7D1xaInCuZjTBXoW"

# Session configuration
# ~~~~~
application.session.httpOnly = false

application.session.secure = false

# The application languages
# ~~~~~
application.langs = "en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global = uk.gov.hmrc.epayeapi.MicroserviceGlobal

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
application.router = prod.Routes


# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  com.kenshoo.play.metrics.MetricsController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }

  uk.gov.hmrc.epayeapi.controllers.RtiChargesController = {
    needsAuth = false
    needsLogging = true
    needsAuditing = true
  }

  uk.gov.hmrc.epayeapi.controllers.Documentation = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
}


# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}

Test {
  microservice {
    services {
      auth {
        host = localhost
        port = 8500
      }
      epaye {
        host = localhost
        port = 8090
      }
      service-locator {
        host = localhost
        port = 9602
      }
    }
  }
}

Dev {
  baseUrl = "localhost:9000"
  auditing {
    enabled = true
    traceRequests = true
    consumer {
      baseUri {
        host = localhost
        port = 8100
      }
    }
  }
  microservice {
    services {
      auth {
        host = localhost
        port = 8500
      }
      epaye {
        host = localhost
        port = 8090
      }
      service-locator {
        host = localhost
        port = 9602
      }
    }
  }
}

Prod {
  microservice {
    services {
      auth {
        host = auth.protected.mdtp
        port = 80
      }
      epaye = {
        host = epaye.protected.mdtp
        port = 80
      }
      service-locator {
        host = service-locator.protected.mdtp
        port = 80
      }
    }
  }
}

api {
  context = "epaye-api"
  status = "PROTOTYPED"
}
